#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

//#include <string.h>

#define NUM_THREADS 4

#define ARRAY_SIZE 1600000
#define STRING_SIZE 16
#define ALPHABET_SIZE 26

char char_array[ARRAY_SIZE][STRING_SIZE];
int char_counts[ALPHABET_SIZE];			// count of individual characters

char getRandomChar()
{
    int randNum = 0;
    char randChar = ' ';

    randNum = ALPHABET_SIZE * (rand() / (RAND_MAX + 1.0)); 	// pick number 0 < # < 25
    randNum = randNum + 97;				// scale to 'a'
    randChar = (char) randNum;

    // printf("%c", randChar);
    return randChar;
}

void init_arrays()
{
  int i, j; 

  // Populate the array with data
  for ( i = 0; i < ARRAY_SIZE; i++) {
    for ( j = 0; j < STRING_SIZE; j++ ) {
      char_array[i][j] = getRandomChar();
    }
  }

  // Initialize the array for holding character frequencies
  for ( i = 0; i < ALPHABET_SIZE; i++ ) {
  	char_counts[i] = 0;
  }
}

void count_array(int myID)
{
	char theChar;
	int i, j, charLoc;
	int local_char_count[ALPHABET_SIZE];
	int startPos, endPos;

        // Bounds of computation
		startPos = myID * (ARRAY_SIZE / NUM_THREADS);
		endPos = startPos + (ARRAY_SIZE / NUM_THREADS);

		printf("section = %d startPos = %d endPos = %d \n", myID, startPos, endPos);

		// init local count array
		for ( i = 0; i < ALPHABET_SIZE; i++ ) {
			local_char_count[i] = 0;
		}
		
        // Count up our section of the global array
        for (i = startPos; i < endPos; i++) {
            for (j = 0; j < STRING_SIZE; j++) {
                theChar = char_array[i][j];
                charLoc = ((int) theChar) - 97;
                local_char_count[charLoc]++;
            }
        }

       // sum up the partial counts into the global arrays
       #pragma omp critical
       {
          for ( i = 0; i < ALPHABET_SIZE; i++ ) {
	    char_counts[i] += local_char_count[i];
	  }
       }
	
}

void print_results()
{
  int i, total = 0;

  // then print out the totals
  for ( i = 0; i < ALPHABET_SIZE; i++ ) {
     total += char_counts[i];
     printf(" %c %d\n", (char) (i + 97), char_counts[i]);
  }
  
  printf("\nTotal characters:  %d\n", total);
}

int main() {
    // Set the number of threads
	omp_set_num_threads(NUM_THREADS);

	init_arrays();

    // Call count_array with parallel threads
	#pragma omp parallel 
	{
		count_array(omp_get_thread_num());
	}

	print_results(char_counts);

	return 1;
}
